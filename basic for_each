
# The for_each approach is generally preferred when working with maps as it provides more stable resource addressing.

# Variables for VNets and Subnets
variable "vnets" {
  description = "Map of VNets to create with their subnets"
  type = map(object({
    address_space = list(string)
    subnets = map(object({
      address_prefixes = list(string)
    }))
  }))
  default = {
    vnet1 = {
      address_space = ["10.0.0.0/16"]
      subnets = {
        subnet1 = { address_prefixes = ["10.0.1.0/24"] }
        subnet2 = { address_prefixes = ["10.0.2.0/24"] }
      }
    }
    vnet2 = {
      address_space = ["10.1.0.0/16"]
      subnets = {
        subnet1 = { address_prefixes = ["10.1.1.0/24"] }
        subnet3 = { address_prefixes = ["10.1.3.0/24"] }
      }
    }
  }
}

# Resource Group
resource "azurerm_resource_group" "example" {
  name     = "example-resources"
  location = "East US"
}

# Create VNets
resource "azurerm_virtual_network" "example" {
  for_each            = var.vnets
  name                = each.key
  address_space       = each.value.address_space
  location            = azurerm_resource_group.example.location
  resource_group_name = azurerm_resource_group.example.name
}

# Create Subnets in each VNet
resource "azurerm_subnet" "example" {
  for_each = {
    for subnet_key, subnet in flatten([
      for vnet_key, vnet in var.vnets : [
        for subnet_key, subnet in vnet.subnets : {
          vnet_key   = vnet_key
          subnet_key = subnet_key
          subnet     = subnet
        }
      ]
    ]) : "${subnet_key.vnet_key}-${subnet_key.subnet_key}" => subnet_key
  }

  name                 = each.value.subnet_key
  resource_group_name  = azurerm_resource_group.example.name
  virtual_network_name = azurerm_virtual_network.example[each.value.vnet_key].name
  address_prefixes     = each.value.subnet.address_prefixes
}
